@model AttendanceDatabase.Models.FlaggedDataViewModel

@{
    ViewData["Title"] = "Flagged Data";
}

@*     <form>
        <button type="submit" class="RP_backBtn" asp-controller="Form" asp-action="RP_Index">Back</button>
    </form> *@

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

<body class="RP_ViewForm">
<h2 class="text-center">Flagged Categories</h2>
</br>
<div>
<table class="table">
    <thead>
        <tr>
            <th>Category Name</th>
            <th>Date</th>
            <th>Total Attendance</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in Model.Categories)
        {
            <tr>
                <td>@category.Name</td>
                <td>@category.Date.ToShortDateString()</td>
                <td>@category.TotAttn</td>
                <td>
                    <!-- Form with hidden input to submit the date for the category -->
                    <form asp-action="DataEntry" method="post">
                        <input type="hidden" name="date" value="@category.Date.ToString("yyyy-MM-dd")" />
                        <button type="submit" class="FlaggedDateEnter">Go to Date</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
    <div id="pagination-controls" class="text-center"></div>
    </div>
    <script>
        const rowsPerPage = 10;
        let currentPage = 1;

        function paginateTable() {
            const table = document.querySelector(".table tbody");
            const rows = table.querySelectorAll("tr");
            const totalPages = Math.ceil(rows.length / rowsPerPage);

            rows.forEach((row, index) => {
                row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage) ? "" : "none";
            });

            renderPaginationControls(totalPages);
        }

        function renderPaginationControls(totalPages) {
            const pagination = document.getElementById("pagination-controls");
            pagination.innerHTML = "";

            const createButton = (pageNum, isCurrent = false) => {
                const btn = document.createElement("button");
                btn.innerText = pageNum;
                btn.classList.add("btn", "btn-light", "mx-1");
                if (isCurrent) btn.classList.add("btn-primary");

                btn.addEventListener("click", () => {
                    currentPage = pageNum;
                    paginateTable();
                });

                return btn;
            };

            const addEllipsis = () => {
                const span = document.createElement("span");
                span.innerText = "...";
                span.classList.add("mx-2");
                pagination.appendChild(span);
            };

            for (let i = 1; i <= totalPages; i++) {
                if (
                    i === 1 || // always show first page
                    i === totalPages || // always show last page
                    (i >= currentPage - 1 && i <= currentPage + 1) // current, one before, one after
                ) {
                    pagination.appendChild(createButton(i, i === currentPage));
                } else if (
                    i === 2 && currentPage > 4 || // early ellipsis
                    i === totalPages - 1 && currentPage < totalPages - 3 || // late ellipsis
                    (i === currentPage - 2 || i === currentPage + 2)
                ) {
                    addEllipsis();
                }
            }
        }


        // Call the function once the page is loaded
        window.addEventListener("DOMContentLoaded", paginateTable);
    </script>
</body>
