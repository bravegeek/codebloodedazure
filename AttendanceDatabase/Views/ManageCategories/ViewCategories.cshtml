@{
    ViewData["Title"] = "View Categories";
}

@model List<Category>
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="RP_ViewForm">

    <h1 class="text-center">Categories</h1>

    <div>

        <form>
            <button type="submit" class="RP_AddNew" asp-controller="ManageCategories" asp-action="CreateCategory"><i class="fa fa-plus-circle" aria-hidden="true"></i></button>
        </form>
        <br />

        <table class="table">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Category Date</th>
                    <th>Category Tags</th>
                    <th>Attendance Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    for (int i = 0; i < Model.Count(); i++)
                    {
                        <tr>
                            <td>@Model[i].Name</td>
                            <td>@Model[i].Date.ToString("MM/dd/yyyy")</td>
                            <td>
                                @if (Model[i].Tags != null && Model[i].Tags.Any())
                                {
                                    @for (int j = 0; j < Model[i].Tags.Count(); j++)
                                    {
                                        <span>@Model[i].Tags[j].TagName</span>
                                    }
                                }
                                else
                                {
                                    <span>No tags attatched</span>
                                }
                            </td>

                            <td>@Model[i].TotAttn</td>
                            <td>
                                <a asp-action="CreateCategory" class="Blue_Btn" asp-route-id="@Model[i].Id">Edit</a>
                                <a asp-action="DeleteCategory" class="Red_Btn" asp-route-id="@Model[i].Id">Delete</a>
                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
        <div id="pagination-controls" class="text-center"></div>
    </div>
    <script>
        const rowsPerPage = 10;
        let currentPage = 1;

        function paginateTable() {
            const table = document.querySelector(".table tbody");
            const rows = table.querySelectorAll("tr");
            const totalPages = Math.ceil(rows.length / rowsPerPage);

            rows.forEach((row, index) => {
                row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage) ? "" : "none";
            });

            renderPaginationControls(totalPages);
        }

        function renderPaginationControls(totalPages) {
            const pagination = document.getElementById("pagination-controls");
            pagination.innerHTML = "";

            const createButton = (pageNum, isCurrent = false) => {
                const btn = document.createElement("button");
                btn.innerText = pageNum;
                btn.classList.add("btn", "btn-light", "mx-1");
                if (isCurrent) btn.classList.add("btn-primary");

                btn.addEventListener("click", () => {
                    currentPage = pageNum;
                    paginateTable();
                });

                return btn;
            };

            const addEllipsis = () => {
                const span = document.createElement("span");
                span.innerText = "...";
                span.classList.add("mx-2");
                pagination.appendChild(span);
            };

            for (let i = 1; i <= totalPages; i++) {
                if (
                    i === 1 || // always show first page
                    i === totalPages || // always show last page
                    (i >= currentPage - 1 && i <= currentPage + 1) // current, one before, one after
                ) {
                    pagination.appendChild(createButton(i, i === currentPage));
                } else if (
                    i === 2 && currentPage > 4 || // early ellipsis
                    i === totalPages - 1 && currentPage < totalPages - 3 || // late ellipsis
                    (i === currentPage - 2 || i === currentPage + 2)
                ) {
                    addEllipsis();
                }
            }
        }


        // Call the function once the page is loaded
        window.addEventListener("DOMContentLoaded", paginateTable);
    </script>

</body>
</html>



