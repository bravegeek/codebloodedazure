@{
    ViewData["Title"] = "View Tags";
}

@model List<Tags>

<!DOCTYPE html>
<html>
<head>
</head>
<body class="RP_ViewForm">
    <h1 class="text-center">Tags</h1>
    <div>

        <table class="table">
            <thead>
                <tr>
                    <th>Tag Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var tags in Model)
                    {
                        <tr>
                            <td>@tags.Name</td>
                        </tr>

                    }
                }
            </tbody>
        </table>
        <div id="pagination-controls" class="text-center mt-3"></div>
    </div>
    <script>
        const rowsPerPage = 10;
            let currentPage = 1;

            function paginateTable() {
                const table = document.querySelector(".table tbody");
                const rows = table.querySelectorAll("tr");
                const totalPages = Math.ceil(rows.length / rowsPerPage);

                rows.forEach((row, index) => {
                    row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage) ? "" : "none";
                });

                renderPaginationControls(totalPages);
            }

            function renderPaginationControls(totalPages) {
                const pagination = document.getElementById("pagination-controls");
                pagination.innerHTML = "";

                const createButton = (pageNum, isCurrent = false) => {
                    const btn = document.createElement("button");
                    btn.innerText = pageNum;
                    btn.classList.add("btn", "btn-light", "mx-1");
                    if (isCurrent) btn.classList.add("btn-primary");

                    btn.addEventListener("click", () => {
                        currentPage = pageNum;
                        paginateTable();
                    });

                    return btn;
                };

                const addEllipsis = () => {
                    const span = document.createElement("span");
                    span.innerText = "...";
                    span.classList.add("mx-2");
                    pagination.appendChild(span);
                };

                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 ||
                        i === totalPages ||
                        (i >= currentPage - 1 && i <= currentPage + 1)
                    ) {
                        pagination.appendChild(createButton(i, i === currentPage));
                    } else if (
                        i === 2 && currentPage > 4 ||
                        i === totalPages - 1 && currentPage < totalPages - 3 ||
                        (i === currentPage - 2 || i === currentPage + 2)
                    ) {
                        addEllipsis();
                    }
                }
            }

            window.addEventListener("DOMContentLoaded", paginateTable);</script>

</body>
</html>
